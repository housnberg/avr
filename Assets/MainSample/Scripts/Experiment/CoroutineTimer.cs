//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

public class CoroutineTimer
{
	// should the timer be executed repeatedly
	private bool repeatTimer;
	// stopping condition meet or external cancelation
	private bool stop;
	// waiting interval
	private float waitingIntervalInSeconds;
	// function which should be called in case the interval expired
	private Action callback;
	// Initializes a new CoroutineTimer instance, it does not start automatically however.
	public CoroutineTimer(float waitingIntervalInSeconds, bool repeatTimer, Action callback)
	{
		this.stop = false;
		this.repeatTimer = repeatTimer;
		this.waitingIntervalInSeconds = waitingIntervalInSeconds;
		this.callback = callback;
	}
	// run timer as coroutine
	public IEnumerator Start()
	{
		while (!stop)
		{
			if (stop == false)
			{
				//Debug.Log("timer starts waiting...");
				yield return new WaitForSeconds(this.waitingIntervalInSeconds);
				//Debug.Log("waiting is  done...");
				if (callback != null)
					callback();
			}
			// exit loop if there are no repetitions
			if (!this.repeatTimer)
			{
				break;
			}
		}
	}

	// timer without repetition
	public static IEnumerator Start(float waitingIntervalInSeconds, Action callback)
	{
		return Start(waitingIntervalInSeconds, false, callback);
	}
	

	// timer with possible repetition
	public static IEnumerator Start(float waitingIntervalInSeconds, bool repeatTimer, Action callback)
	{
		CoroutineTimer timer = new CoroutineTimer(waitingIntervalInSeconds, repeatTimer, callback);
		return timer.Start();
	}
	public void Stop()
	{
		this.stop = true;
	}
	public bool Repeat
	{
		get { return repeatTimer; }
	}
}

